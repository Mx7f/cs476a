// -*- html -*-
/** \file journal.dox
\page Journal Development Journal

\tableofcontents

<i>Newest entries are at the top</i>

\section S20151013 2015-10-13: Two Eyes

\thumbnail{2015-10-13_019_MusicVisualizer_g3d_r327__.png, }




\thumbnail{2015-10-13_018_MusicVisualizer_g3d_r327__.png, }




\thumbnail{2015-10-13_017_MusicVisualizer_g3d_r327__.png, }




\thumbnail{2015-10-13_016_MusicVisualizer_g3d_r327__.png, }





\thumbnail{2015-10-13_015_MusicVisualizer_g3d_r327__.png, }

Added a way to randomize eye settings and a second eye. I am happy with this.

\section S20151013 2015-10-13: The Eye

\thumbnail{2015-10-13_014_MusicVisualizer_g3d_r327__Visualizing_everything_at_once_.png, Visualizing everything at once!}

I multiply back in the angular visualization of the waveform, and adjust the pupil size based on an exponentially-weighted moving average of RMS, and all of a sudden, a single eye fulfills all of the assignment's requirements. And is pretty pot smoking!


\thumbnail{2015-10-13_013_MusicVisualizer_g3d_r327__Time-varying_spiral_frequency.png, Time-varying spiral frequency}

Now this is pot-smoking. Time is now near the pupil and fades off into history as we get further from the center. I added a rotation dependent on time to the spiral as well, which turns at just the right rate of speed so that bits of sound history actually fade out straight radially, which is a really cool aesthetic. So now we have frequency visualized along with its history. Time to add back in direct waveform visualization.


\thumbnail{2015-10-13_012_MusicVisualizer_g3d_r327__Spiral_Visualization_of_Frequency.png, Spiral Visualization of Frequency}

With the last visualization, I had a problem. I wanted to introduce a frequency history visualization, as required in the assignment. But I was radially varying frequency, and saw no easy way to translate that into showing history (I could use Z, but then the eyes would blend over each other, which would be very difficult to decipher visually and probably wouldn't look good. Angularly-varying has a better story for history: let time vary along radius. But angularly-varying frequency is boring, as we saw before, so I spiced things up and added a spiral. Much more exciting! And sets up for the next visualization.


\thumbnail{2015-10-13_011_MusicVisualizer_g3d_r327__Multiplying_radial_frequency_with_angular_waveform.png, Multiplying radial frequency with angular waveform}

By multiplying the radially-varying frequency visualization with the angularly-varying waveform visualization. Now this really looks like an iris, and manages to simultaneously visualize 2 of the 4 things required by our assignment.


\thumbnail{2015-10-13_010_MusicVisualizer_g3d_r327__Mapping_over_half_the_angles__and_reflecting.png, Mapping over half the angles\, and reflecting}

I got rid of the annoying seam from the angular visualization of the waveform by mapping only over the first pi angles and reflecting the result over the x axis.


\thumbnail{2015-10-13_009_MusicVisualizer_g3d_r327__Waveform_mapped_to_angle.png, Waveform mapped to angle}

The waveform actually looks pretty good visualized angularly.


\thumbnail{2015-10-13_008_MusicVisualizer_g3d_r327__Mapping_frequency_over_angle.png, Mapping frequency over angle}

Instead of mapping the 1D domain radially, we can also do it over the polar coordinate phi value. By itself I do not really appreciate this aesthetic, looks too much like a loading screen.


\thumbnail{2015-10-13_007_MusicVisualizer_g3d_r327__Using_an_exponentially-weighted_moving_average_of_the_frequency__with_a_diffferent_weight_in_each_color_channel.png, Using an exponentially-weighted moving average of the frequency\, with a diffferent weight in each color channel}

I took a short detour from my single color restriction (rules are made to be broken!) to try an interesting way of visualizing the time-varying nature of the frequency: I kept track of three exponentially-weighted moving averages of the frequency with different weights (the highest weight made the average change slowly and smoothly, while the lowest changed quickly and juttery). I then visualized each of the three in one of the color channels, leading to an interesting color-changing eye. Although it is cool, I decided to go back to my restriction and push harder there.


\thumbnail{2015-10-13_006_MusicVisualizer_g3d_r327__Waveform_Visualization.png, Waveform Visualization}

It is easy enough to map the 1D audio values to radius.



\thumbnail{2015-10-13_005_MusicVisualizer_g3d_r327__My_first_eye_.png, My first eye.}

As a graphics researcher and Oculus fanboy, I really like the eye aesthetic. As a "The Matrix" fanboy and hombrew themed OS X terminal user; I love green on black. I decided to take to heart Prof. Wang's suggestion to add arbitrary restrictions, and began my quest to make a music visualizer using only a single "eye" and only the color green. The first iteration was simply pushing out the visualization from my inital shadertoy radially to get a pupil.

\section S20151013 2015-10-13: My own shadertoys


\thumbnail{2015-10-13_004_MusicVisualizer_g3d_r327__A_version_of_my_Shadertoy__made_within_this_application__replacing_the_length_function_from_my_public_shadertoy_with_a__hexLength__function_.png, A version of my Shadertoy\, made within this application; replacing the length function from my public shadertoy with a \"hexLength\" function.}

Using the Shadertoy harness it was easy to prototype new shaders. I really liked the radial symmetry an single-color aesthetic I had seen in class and so played around with that. At this point I was still leaning towards making a space themed visualizer, but the more I played around with this aesthetic, the less I liked the idea of switching away from it.

\section S20151013 2015-10-13: Shadertoys

\thumbnail{2015-10-13_003_MusicVisualizer_g3d_r327__Modified_version_of_the_wonderful_Fractal_Land__shader_by_Kali_https___www_shadertoy_com_view_XsBXWt.png, Modified version of the wonderful Fractal Land
shader by Kali https://www.shadertoy.com/view/XsBXWt}




\thumbnail{2015-10-13_002_MusicVisualizer_g3d_r327__Modified_version_of_the_wonderful_Cubescape__shader_by_iq_https___www_shadertoy_com_view_Msl3Rr.png, Modified version of the wonderful Cubescape
shader by iq https://www.shadertoy.com/view/Msl3Rr}





\thumbnail{2015-10-13_001_MusicVisualizer_g3d_r327__Modified_version_of_the_wonderful_Main_Star_Sequence___shader_by_flight404_https___www_shadertoy_com_view_4dXGR4.png, Modified version of the wonderful Main Star Sequence
 shader by flight404 https://www.shadertoy.com/view/4dXGR4}

Shadertoy.com is one of my favorite websites, and I am always impressed with the creations of the users. I decided to make a harness in my program so that it was easy to play with other people's shadertoys. I added support for the most widely used shadertoy uniforms and adapted a few shaders to work in my framework (albeit without input textures).

\section S20151013 2015-10-13: Particle System Deadend


\thumbnail{2015-10-13_000_MusicVisualizer_g3d_r327__Audio_reactive_particle_system.png, Audio reactive particle system}

I threw together a particle system that reacted to audio by spawning particles with velocity in the xy plane determined by the complex coordinates of the frequency values after a short FFT. This did produce an interesting effect, but after the in-class demo event, I decided to try and do more with far more restrictions, and put aside particle systems.

\section S20151004 2015-10-04: Frequency Visualization

\thumbnail{2015-10-04_003_MusicVisualizer_g3d_r320__Added_a_Waterfall.jpg, Added a Waterfall}

Since I already had the full history texture I just set up instanced rendering and set the Z coordinate of the frequency points to depend on their gl_InstanceID, it was a 3 line of code change!



\thumbnail{2015-10-04_002_MusicVisualizer_g3d_r320__First_attempt_at_frequency_visualization.jpg, First attempt at frequency visualization}

I am using basically the same shader as for the waveform visualization, but I compute the magnitude of the frequency directly in the shader and then transform it by a sqrt so it doesn't look quite so flat. And boy is bloom awesome :)

\section S20151004 2015-10-04: Planning for the future

\thumbnail{2015-10-04_001_MusicVisualizer_g3d_r320__Audio_Frequency_Texture.jpg, Audio Frequency Texture}

In order to replicate sndpeek's frequency visualizer, I integrated Chuck's FFT code. At every time slice I now shunt the data through the real FFT, and upload the data into a full history texture (like the raw audio data) where each row is a single time slice. The red channel in this visualization represents the real component, and the green represents the imaginary component of each of the output complex numbers from the FFT. I am not quite sure if I am doing everything correctly on the audio processing side, but it closely resembles sndpeek's output, so I will proceed with visualization.



\thumbnail{2015-10-04_000_MusicVisualizer_g3d_r320__The_raw_audio_sample_texture_with_512_time_slices_of_history_.jpg, The raw audio sample texture with 512 time slices of history.}

I have many ideas floating around in my head for what I want the music visualizer to be; so I want to be able to test each one quickly. My thought is that the best way to do that is to generate all of the data I could possibly want, and upload it to the GPU in a texture, then its super easy to access (and since G3D supports hot-reloading of shaders, it will be very quick to iterate on several shader variations). So I thought that I will likely want a lengthy history of the waveform for cool temporal effects, so I keep track of the last 512 time slices worth of raw audio data. I also modified the waveform visualization shader to read the proper row of data, so it remains visually the same.

\section S20151003 2015-10-03: Loading Audio and Uploading to the GPU

\thumbnail{2015-10-03_003_MusicVisualizer_g3d_r323__Reproducing_waveform_visualizer_from_sndpeek_.jpg, Reproducing waveform visualizer from sndpeek.}

Since we have the audio data in texture, it's straightforward to reproduce sndpeek's audio visualizer. I simply start a shader pass with no vertex attributes, with the primitive type of LINE_STRIP, and make the number of vertices equal to the number of samples. Then I use the vertex shader to position the vertices, using gl_VertexID to choose the texel to sample from the audio texture, which in turn determines the y coordinate (which is in the range -1 to 1). The x coordinate is just gl_VertexID/(numAudioSample-1)*c - (c/2) for a constant c (which determines the x extent of the entire wave, I tuned it so that the default camera position just barely sees the entire wave). The z coordinate is 0. The pixel shader just outputs green, and then I run G3D's full post-process pipeline. I turned off screen-space anti-aliasing, since it interacts poorly with 1-pixel features. I cranked up bloom to get the cool looking glowing effect.



\thumbnail{2015-10-03_002_MusicVisualizer_g3d_r323__Portion_of_audio_data_visualized__zoomed_in_so_its_easy_to_see__The_smooth_gradient_is_from_whistling_.jpg, Portion of audio data visualized; zoomed in so its easy to see. The smooth gradient is from whistling.}

I successfully integrate RtAudio into a simple G3D application. Every render frame I take the current audio data and upload it to a (numSamples x 1) floating point texture, which I am visualizing using G3D's slick texture viewer, zoomed in a bit so its easy to see the smooth gradient caused by whistling.

\section notes Formatting Notes
Put the newest entry at the top of this file, like a blog. 
Begin the title of each section with a date in ISO format (YYYY-MM-DD).
Press F4 and F6 to embed screenshots and video in this journal.

Doxygen supports [markdown syntax](http://www.stack.nl/~dimitri/doxygen/manual/markdown.html),
[many HTML commands](http://www.stack.nl/~dimitri/doxygen/manual/htmlcmds.html),
and LaTeX-like [Doxygen commands](http://www.stack.nl/~dimitri/doxygen/manual/commands.html)
for formatting in this file. The most frequently used of these are:

\verbatim
[Link syntax](http://g3d.codeplex.com)

Table    | Syntax
-------: | ---------
  100 ms |  Hello
  5 ms   |  World

- List
- Syntax
  + Subbullet

~~~~~~~~~~~~~
// Code syntax in C++
for (int i = 0; i < 10; ++i) {
   printf("%d\n", i);
}
~~~~~~~~~~~~~
\endverbatim

which produce:

[Link syntax](http://g3d.codeplex.com)

Table  | Syntax
-----: | ---------
  1 ms |  Hello
500 ms |  World

- List
- Syntax
  + Subbullet

~~~~~~~~~~~~~
// Code syntax in C++
for (int i = 0; i < 10; ++i) {
   printf("%d\n", i);
}
~~~~~~~~~~~~~

You can manually embed images in this file using the custom G3D Doxygen commands:

\verbatim
\thumbnail{imagefilename}
\thumbnail{imagefilename, caption}
\video{videofilename, caption}
\endverbatim

The `imagefilename` does not need to include a path.  Put the images
in the `journal/` or `doc-files/` directories.  They will
automatically be copied to the `build/doc` directory when you run Doxygen.

If you have Latex installed, then you can display inline (\f$ \int_{-\infty}^{\infty} e^{-x^2} dx \f$) and display math equations, for example: \f[ \int_{-\infty}^{\infty} e^{-x^2} dx \f]

*/
