#version 330
#include "shadertoyHeader.glsl"

#define TAU 6.28318530718

#include "eyeMode.glsl"

#expect MODE "EyeMode"

float binUnitSignal(float originalSignal, float numBins) {
    return (floor(originalSignal * numBins) + 0.5) / numBins;
}


float frequency(float coord) {
    return (sampleFrequencyDbAudio(fastEWMAfreq_buffer, coord) + 120.0) / 80.0;
}

float frequency(float coord, float time) {
    return (sampleFrequencyDbAudio(coord, time) + 120.0) / 80.0;
}


float frequency(sampler2D s, float coord) {
    return (sampleFrequencyDbAudio(s, coord) + 120.0) / 80.0;
}

float frequencySlow(float coord) {
    return frequency(slowEWMAfreq_buffer, coord);
}

float frequencyGlacial(float coord) {
    return frequency(glacialEWMAfreq_buffer, coord);
}

float waveform(float coord) {
    return sampleRawAudio(coord, 0) * 0.5 + 0.5;
}

uniform float pupilWidth;
uniform float angleOffsetTimeMultiplier;

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 h = (iResolution.xy*0.5);
    vec2 uv = (fragCoord.xy - h) / h.y;

    float angleOffset = -iGlobalTime * angleOffsetTimeMultiplier;
    float radius = length(uv);
    float r = (radius - pupilWidth) / (1.0 - pupilWidth);
    float phi = atan(uv.y, uv.x);
    float a = (phi / TAU) + 0.5;
    a = fract(a + angleOffset);
    //a = binUnitSignal(a, 100.0);
    //r = binUnitSignal(r, 100.0);
    float time  = r * frequencyAudio_size.y * 0.2;
    float historyA = fract(a + time * 1.0/60.0);

    vec4 color = vec4(0, 0, 0, 0);
    if (MODE == RADIAL_FREQUENCY) {
        color = vec4(0, frequency(r), 0, 1.0);
    } else if (MODE == RADIAL_WAVEFORM) {
        color = vec4(0, waveform(r), 0, 1.0);
    } else if (MODE == RADIAL_FREQUENCY_HISTORY) {
        color = vec4(frequencySlow(r), frequency(r), frequencyGlacial(r), 1.0);
    } else if (MODE == ANGULAR_FREQUENCY) {
        color = vec4(0, frequency(a), 0, 1.0);
    } else if (MODE == ANGULAR_WAVEFORM) {
        color = vec4(0, waveform(a), 0, 1.0);
    } else if (MODE == ANGULAR_WAVEFORM_SYMMETRY) {
        color = vec4(0, waveform(abs(a*2.0-1.0)), 0, 1.0);
    } else if (MODE == ANGULAR_WAVEFORM_RADIAL_FREQUENCY) {
        color = vec4(0, waveform(abs(a*2.0 - 1.0)) * frequency(r), 0, 1.0) * 2.0;
    } else if (MODE == SPIRAL_FREQUENCY) {        
        color = vec4(0, frequency(fract(r + a)), 0, 1.0) * 2.0;
    } else if (MODE == SPIRAL_FREQUENCY_HISTORY) {       
    	color = vec4(0, frequency(historyA, time), 0, 1.0) * 2.0;
    } else if (MODE == ANGULAR_WAVEFORM_SPIRAL_FREQUENCY_HISTORY) {
        color = vec4(0, waveform(abs(a*2.0 - 1.0)) * frequency(historyA, time), 0, 1.0) * 2.0;
    } 

    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);
    fragColor = mix(color, black, smoothstep(0.99, 1.0, radius));
    if (pupilWidth > 0.0) {
        fragColor = mix(black, fragColor, smoothstep(pupilWidth, pupilWidth + 0.01, radius));
    }
    //fragColor = vec4(vec3(fract(r + a)), 1.0);
}


#include "shadertoyFooter.glsl"






